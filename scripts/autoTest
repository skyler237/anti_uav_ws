#!/bin/bash

# Start roscore
# IS_RUNNING=`pgrep roscore`
# if [ "${IS_RUNNING:-null}" = null ]; then
# 	roscore &
# 	sleep 5
# fi

# rostopic pub /is_flying std_msgs/Bool "data: true" &
getAllRunningProcesses()
{
	IS_RUNNING="`pgrep ros` `pgrep record` `pgrep gz`"
	IS_RUNNING="$IS_RUNNING `pgrep fleet` `pgrep controller` `pgrep python` `pgrep intercept` `pgrep sim_analysis` `pgrep joy`"

	echo $IS_RUNNING
}

formatSeconds()
{
	dt=$1
	dd=$(echo "$dt/86400" | bc )
	dt2=$(echo "$dt-86400*$dd" | bc -l)
	dh=$(echo "$dt2/3600" | bc )
	dt3=$(echo "$dt2-3600*$dh" | bc -l)
	dm=$(echo "$dt3/60" | bc )
	ds=$(echo "$dt3-60*$dm" | bc -l)

	printf "%d:%02d:%02d:%02.4f" $dd $dh $dm $ds
}

# Loop for a certain number of times
TEST_RUN_MIN=$1
TEST_RUN_MAX=$2

# Create and clear out results file
RESULTS="results.txt"
> $RESULTS

TEST_CRASHED="false"
LAST_TEST_NUMBER="0"

TOTAL_RUNTIME="0"
AVERAGE_RUNTIME="0"
ESTIMATED_REMAINING_TIME=$(echo "($TEST_RUN_MAX - $TEST_RUN_MIN)*19" | bc )
START_TIME=`date +%s.%N`

for((i=TEST_RUN_MIN; i <= TEST_RUN_MAX; i++))
do	
	printf "========================== Beginning Simulation #$i ==========================\n"	

	# Print results header to file
	echo "Results for simulation #$i" >> $RESULTS
	
	# Start roslaunch
	roslaunch anti_uav autotest.launch &
	# Wait for ros to startup
	IS_RUNNING=`pgrep rosout`
	while [ "${IS_RUNNING:-null}" = null ]
	do
		IS_RUNNING=`pgrep rosout`
		printf "ROS is starting...\r"
	done
	printf "\n"

	# Export results to file
	rostopic echo /results >> $RESULTS &
	ROSTOPIC_PID=`echo $!`

	# Start rosbag
	rosbag record /fleet_pose /waypoint -e "(.*)odometry" "(.*)_goal" "(.*)path_coeff" --duration=60 -O auto_test"$i".bag &
	ROSBAG_PID=`echo $!`

	# Use results topic to see if the simulation is done
	rosbag record /results --limit=1 -O results"$i".bag &
	FINISHED_PID=`echo $!`

	rostopic pub /is_flying std_msgs/Bool "data: true" &
	sleep 5
	rosservice call gazebo/unpause_physics 

	(( UNPAUSE_WATCHDOG = 0 ))

	# Wait for results
	IS_RUNNING=`ps --no-headers $FINISHED_PID`
	while [ "${IS_RUNNING:-null}" != null ]
	do
		IS_RUNNING=`ps --no-headers $FINISHED_PID`
		GAZEBO_IS_RUNNING=`pgrep gz`

		# If gazebo has crashed exit the loop and restart testing 
		if [ "${GAZEBO_IS_RUNNING:-null}" == null ]; then
			TEST_CRASHED="true"
			LAST_TEST_NUMBER="$i"
			printf "\n\nERROR: Gazebo has crashed!\n\n"
			break
		else
			FORMATTED_EST_TIME=$(formatSeconds $ESTIMATED_REMAINING_TIME)
			FORMATTED_AVG_TIME=$(formatSeconds $AVERAGE_RUNTIME)
			printf "Simulation #$i of $TEST_RUN_MAX is running...| Est. remaining time=$FORMATTED_EST_TIME | Avg. sim time=$FORMATTED_AVG_TIME\r"	
		fi

		(( UNPAUSE_WATCHDOG++ ))
		if [ "$UNPAUSE_WATCHDOG" == "300" ]; then
			rosservice call gazebo/unpause_physics
			printf "\n\nUnpausing physics...\n\n"
		elif [ "$UNPAUSE_WATCHDOG" == "5000" ]; then
			TEST_CRASHED="true"
			LAST_TEST_NUMBER="$i"
			printf "\n\nERROR: Test timed out!\n\n"
			sleep 10
			break
		fi		
	done
	printf "\n" >> $RESULTS

	# If gazebo has crashed, exit the loop and restart testing 
	if [ "$TEST_CRASHED" == "true" ]; then
		break
	fi

	# Kill rosbag, rostopic
	kill $ROSBAG_PID
	kill $ROSTOPIC_PID

	# Kill roslaunch and gazebo
	pkill roslaunch
	# kill $(pgrep gzser*)
	# kill $(pgrep gzcli*)
	printf "\nWaiting for simulation to close...\r"

	# Wait for ros to kill
	IS_RUNNING=`getAllRunningProcesses`
	(( KILL_TIMEOUT = 0 ))
	while [ "${IS_RUNNING:-null}" != null ]
	do
		# pkill -9 roslaunch
		# pkill -9 rostopic
		# pkill -9 rosbag
		# pkill -9 rosmaster
		# pkill -9 rosout
		# pkill -9 record
		kill -9 $IS_RUNNING

		GAZEBO_RUNNING=`pgrep gzser``pgrep gzcli`
		if [ "${GAZEBO_RUNNING:-null}" != null ]; then
			kill $(pgrep gzser*)
			kill $(pgrep gzcli*)
		fi	

		IS_RUNNING=`getAllRunningProcesses`
		printf "Waiting for simulation to close...\r"

		(( KILL_TIMEOUT++ ))
		if [ "$KILL_TIMEOUT" == "3000" ]; then
			# Try to kill EVERYTHING!
			# pkill -9 roslaunch
			# pkill -9 rostopic
			# pkill -9 rosbag
			# pkill -9 rosmaster
			# pkill -9 rosout
			# pkill -9 record			
			# kill $(pgrep gzser*)
			# kill $(pgrep gzcli*)
			kill -9 $IS_RUNNING

			printf "\nAttempting to kill all programs...\n\n"
		elif [ "$KILL_TIMEOUT" == "5000" ]; then
			TEST_CRASHED="true"
			LAST_TEST_NUMBER="$i"
			printf "\n\nERROR: Killing simulation timed out!\n\n"
			sleep 10
			break
		fi		
	done

	# If gazebo has crashed, exit the loop and restart testing 
	if [ "$TEST_CRASHED" == "true" ]; then
		break
	fi

	# Fix ros bags
	~/counter_uas/scripts/fixAllBags

	
	printf "========================== End of Simluation #$i ==========================\n\n\n"

	END_TIME=`date +%s.%N`
	#Calculate average runtime per simulation and total estimated remaining time 
	TOTAL_RUNTIME=$(echo "($TOTAL_RUNTIME + ($END_TIME-$START_TIME))" | bc -l)
	START_TIME=$END_TIME

	AVERAGE_RUNTIME=$(echo "($TOTAL_RUNTIME)/($i+1 - $TEST_RUN_MIN)" | bc -l)
	ESTIMATED_REMAINING_TIME=$(echo "$AVERAGE_RUNTIME*($TEST_RUN_MAX - $i+1)" | bc -l)
done

# If gazebo has crashed, restart testing 

if [ "$TEST_CRASHED" == "true" ]; then
	printf "Re-starting the autoTest at test number $LAST_TEST_NUMBER\n\n"
	pkill roslaunch
	printf "\nWaiting for simulation to close...\r"

	# Wait for ros to kill
	IS_RUNNING=`getAllRunningProcesses`
	(( KILL_TIMEOUT = 0 ))
	while [ "${IS_RUNNING:-null}" != null ]
	do
		# pkill -9 roslaunch
		# pkill -9 rostopic
		# pkill -9 rosbag
		# pkill -9 rosmaster
		# pkill -9 rosout
		# pkill -9 record
		kill -9 $IS_RUNNING

		GAZEBO_RUNNING=`pgrep gzser``pgrep gzcli`
		if [ "${GAZEBO_RUNNING:-null}" != null ]; then
			kill $(pgrep gzser*)
			kill $(pgrep gzcli*)
		fi	

		IS_RUNNING=`getAllRunningProcesses`
		printf "Waiting for simulation to close...\r"

		(( KILL_TIMEOUT++ ))
		if [ "$KILL_TIMEOUT" == "3000" ]; then # Re-attempt to kill all processes
			# Try to kill EVERYTHING!
			# pkill -9 roslaunch
			# pkill -9 rostopic
			# pkill -9 rosbag
			# pkill -9 rosmaster
			# pkill -9 rosout
			# pkill -9 record			
			# kill $(pgrep gzser*)
			# kill $(pgrep gzcli*)
			kill -9 $IS_RUNNING
			printf "\nAttempting to kill all programs...\n\n"
		elif [ "$KILL_TIMEOUT" == "5000" ]; then # Timed-out -- try to kill everything one more time and exit loop
			# pkill -9 roslaunch
			# pkill -9 rostopic
			# pkill -9 rosbag
			# pkill -9 rosmaster
			# pkill -9 rosout
			# pkill -9 record			
			# kill -9 $(pgrep gzser*)
			# kill -9 $(pgrep gzcli*)
			kill -9 $IS_RUNNING
			printf "\n\nERROR: Killing simulation timed out!\n\n"
			sleep 10
			break
		fi		
	done
	
	exec ~/counter_uas/scripts/autoTest $LAST_TEST_NUMBER $TEST_RUN_MAX && exit 0
fi
